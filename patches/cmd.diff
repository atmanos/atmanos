diff --git a/src/cmd/api/goapi.go b/src/cmd/api/goapi.go
index 936f9e5..58dc59e 100644
--- a/src/cmd/api/goapi.go
+++ b/src/cmd/api/goapi.go
@@ -68,6 +68,8 @@ var contexts = []*build.Context{
 	{GOOS: "openbsd", GOARCH: "386"},
 	{GOOS: "openbsd", GOARCH: "amd64", CgoEnabled: true},
 	{GOOS: "openbsd", GOARCH: "amd64"},
+	{GOOS: "atman", GOARCH: "amd64", CgoEnabled: true},
+	{GOOS: "atman", GOARCH: "amd64"},
 }
 
 func contextName(c *build.Context) string {
diff --git a/src/cmd/dist/build.go b/src/cmd/dist/build.go
index 9eb9caf..40e4f2a 100644
--- a/src/cmd/dist/build.go
+++ b/src/cmd/dist/build.go
@@ -65,6 +65,7 @@ var okgoarch = []string{
 
 // The known operating systems.
 var okgoos = []string{
+	"atman",
 	"darwin",
 	"dragonfly",
 	"linux",
@@ -1120,6 +1121,7 @@ var cgoEnabled = map[string]bool{
 	"solaris/amd64":   true,
 	"windows/386":     true,
 	"windows/amd64":   true,
+	"atman/amd64":     true,
 }
 
 func needCC() bool {
diff --git a/src/cmd/internal/obj/link.go b/src/cmd/internal/obj/link.go
index b6861f4..220238b 100644
--- a/src/cmd/internal/obj/link.go
+++ b/src/cmd/internal/obj/link.go
@@ -725,6 +725,7 @@ const (
 	Hplan9
 	Hsolaris
 	Hwindows
+	Hatman
 )
 
 // AsmBuf is a simple buffer to assemble variable-length x86 instructions into.
diff --git a/src/cmd/internal/obj/sym.go b/src/cmd/internal/obj/sym.go
index e974ca8..fbdbc88 100644
--- a/src/cmd/internal/obj/sym.go
+++ b/src/cmd/internal/obj/sym.go
@@ -55,6 +55,7 @@ var headers = []struct {
 	{"solaris", Hsolaris},
 	{"windows", Hwindows},
 	{"windowsgui", Hwindows},
+	{"atman", Hatman},
 }
 
 func headtype(name string) int {
diff --git a/src/cmd/internal/obj/x86/asm6.go b/src/cmd/internal/obj/x86/asm6.go
index 676da40..752de74 100644
--- a/src/cmd/internal/obj/x86/asm6.go
+++ b/src/cmd/internal/obj/x86/asm6.go
@@ -2216,7 +2216,8 @@ func prefixof(ctxt *obj.Link, p *obj.Prog, a *obj.Addr) int {
 				obj.Hfreebsd,
 				obj.Hnetbsd,
 				obj.Hopenbsd,
-				obj.Hsolaris:
+				obj.Hsolaris,
+				obj.Hatman:
 				return 0x64 // FS
 
 			case obj.Hdarwin:
diff --git a/src/cmd/internal/obj/x86/obj6.go b/src/cmd/internal/obj/x86/obj6.go
index 75638a0..8760bf5 100644
--- a/src/cmd/internal/obj/x86/obj6.go
+++ b/src/cmd/internal/obj/x86/obj6.go
@@ -54,7 +54,8 @@ func CanUse1InsnTLS(ctxt *obj.Link) bool {
 		case obj.Hlinux,
 			obj.Hnacl,
 			obj.Hplan9,
-			obj.Hwindows:
+			obj.Hwindows,
+			obj.Hatman:
 			return false
 		}
 
@@ -65,7 +66,7 @@ func CanUse1InsnTLS(ctxt *obj.Link) bool {
 	case obj.Hplan9,
 		obj.Hwindows:
 		return false
-	case obj.Hlinux:
+	case obj.Hlinux, obj.Hatman:
 		return !ctxt.Flag_shared
 	}
 
diff --git a/src/cmd/link/internal/amd64/asm.go b/src/cmd/link/internal/amd64/asm.go
index eff9a22..6d1436d 100644
--- a/src/cmd/link/internal/amd64/asm.go
+++ b/src/cmd/link/internal/amd64/asm.go
@@ -664,7 +664,8 @@ func asmb() {
 		obj.Hnetbsd,
 		obj.Hopenbsd,
 		obj.Hdragonfly,
-		obj.Hsolaris:
+		obj.Hsolaris,
+		obj.Hatman:
 		ld.Debug['8'] = 1 /* 64-bit addresses */
 
 	case obj.Hnacl,
@@ -696,7 +697,8 @@ func asmb() {
 			obj.Hopenbsd,
 			obj.Hdragonfly,
 			obj.Hsolaris,
-			obj.Hnacl:
+			obj.Hnacl,
+			obj.Hatman:
 			symo = int64(ld.Segdwarf.Fileoff + ld.Segdwarf.Filelen)
 			symo = ld.Rnd(symo, int64(ld.INITRND))
 
@@ -780,7 +782,8 @@ func asmb() {
 		obj.Hopenbsd,
 		obj.Hdragonfly,
 		obj.Hsolaris,
-		obj.Hnacl:
+		obj.Hnacl,
+		obj.Hatman:
 		ld.Asmbelf(symo)
 
 	case obj.Hwindows:
diff --git a/src/cmd/link/internal/amd64/obj.go b/src/cmd/link/internal/amd64/obj.go
index f62f237..1087f94 100644
--- a/src/cmd/link/internal/amd64/obj.go
+++ b/src/cmd/link/internal/amd64/obj.go
@@ -110,7 +110,8 @@ func archinit() {
 		obj.Hnetbsd,
 		obj.Hopenbsd,
 		obj.Hsolaris,
-		obj.Hwindows:
+		obj.Hwindows,
+		obj.Hatman:
 		break
 	}
 
@@ -150,7 +151,8 @@ func archinit() {
 		obj.Hnetbsd,    /* netbsd */
 		obj.Hopenbsd,   /* openbsd */
 		obj.Hdragonfly, /* dragonfly */
-		obj.Hsolaris:   /* solaris */
+		obj.Hsolaris,   /* solaris */
+		obj.Hatman:
 		ld.Elfinit()
 
 		ld.HEADR = ld.ELFRESERVE
diff --git a/src/cmd/link/internal/arm64/asm.go b/src/cmd/link/internal/arm64/asm.go
index 7832e91..db4f013 100644
--- a/src/cmd/link/internal/arm64/asm.go
+++ b/src/cmd/link/internal/arm64/asm.go
@@ -518,7 +518,8 @@ func asmb() {
 		obj.Hfreebsd,
 		obj.Hnetbsd,
 		obj.Hopenbsd,
-		obj.Hnacl:
+		obj.Hnacl,
+		obj.Hatman:
 		ld.Asmbelf(int64(symo))
 
 	case obj.Hdarwin:
diff --git a/src/cmd/link/internal/arm64/obj.go b/src/cmd/link/internal/arm64/obj.go
index 86f9ff7..c7a8362 100644
--- a/src/cmd/link/internal/arm64/obj.go
+++ b/src/cmd/link/internal/arm64/obj.go
@@ -99,7 +99,7 @@ func archinit() {
 		if ld.Linkmode == ld.LinkExternal && obj.Getgoextlinkenabled() != "1" {
 			log.Fatalf("cannot use -linkmode=external with -H %s", ld.Headstr(int(ld.HEADTYPE)))
 		}
-	case obj.Hlinux, obj.Hdarwin:
+	case obj.Hlinux, obj.Hdarwin, obj.Hatman:
 		break
 	}
 
@@ -124,7 +124,8 @@ func archinit() {
 			ld.INITRND = 4096
 		}
 
-	case obj.Hlinux: /* arm64 elf */
+	case obj.Hlinux,
+		obj.Hatman: /* arm64 elf */
 		ld.Elfinit()
 		ld.HEADR = ld.ELFRESERVE
 		if ld.INITTEXT == -1 {
diff --git a/src/cmd/link/internal/ld/elf.go b/src/cmd/link/internal/ld/elf.go
index 39d3609..93a75ae 100644
--- a/src/cmd/link/internal/ld/elf.go
+++ b/src/cmd/link/internal/ld/elf.go
@@ -1283,6 +1283,52 @@ func elfwritenetbsdsig() int {
 	return int(sh.size)
 }
 
+// Atman signature
+func elfatmansig(sh *ElfShdr, startva uint64, resoff uint64) int {
+	n := 4 + 8
+	return elfnote(sh, startva, resoff, n, true)
+}
+
+func elfwriteatmansig() int {
+	var n int
+
+	sh := elfwritenotehdr(".note.Xen.loader", 4, 8, 8)
+	if sh == nil {
+		return n
+	}
+	n += int(sh.size)
+
+	Cwrite([]byte("Xen\x00"))
+	Cwrite([]byte("generic\x00"))
+
+	sh = elfwritenotehdr(".note.Xen.version", 4, 8, 5)
+	if sh == nil {
+		return n
+	}
+	n += int(sh.size)
+
+	Cwrite([]byte("Xen\x00"))
+	Cwrite([]byte("xen-3.0\x00"))
+
+	sh = elfwritenotehdr(".note.Xen.hypercall_page", 4, 8, 2)
+	if sh == nil {
+		return n
+	}
+	n += int(sh.size)
+
+	Cwrite([]byte("Xen\x00"))
+
+	var (
+		hypercallPage      = Linklookup(Ctxt, "runtime._atman_hypercall_page", 0)
+		pageSize           = uint64(0x1000)
+		pageStart          = uint64(Symaddr(hypercallPage))
+		hypercallPageStart = (pageStart + pageSize - 1) &^ (pageSize - 1)
+	)
+	Thearch.Vput(hypercallPageStart)
+
+	return n
+}
+
 // OpenBSD Signature
 const (
 	ELF_NOTE_OPENBSD_NAMESZ  = 8
@@ -1853,6 +1899,13 @@ func doelf() {
 	if buildid != "" {
 		Addstring(shstrtab, ".note.go.buildid")
 	}
+
+	if HEADTYPE == obj.Hatman {
+		Addstring(shstrtab, ".note.Xen.loader")
+		Addstring(shstrtab, ".note.Xen.version")
+		Addstring(shstrtab, ".note.Xen.hypercall_page")
+	}
+
 	Addstring(shstrtab, ".elfdata")
 	Addstring(shstrtab, ".rodata")
 	// See the comment about data.rel.ro.FOO section names in data.go.
@@ -2189,7 +2242,7 @@ func Asmbelf(symo int64) {
 	 * segment boundaries downwards to include it.
 	 * Except on NaCl where it must not be loaded.
 	 */
-	if HEADTYPE != obj.Hnacl {
+	if HEADTYPE != obj.Hnacl && false {
 		o := int64(Segtext.Vaddr - pph.vaddr)
 		Segtext.Vaddr -= uint64(o)
 		Segtext.Length += uint64(o)
@@ -2277,6 +2330,35 @@ func Asmbelf(symo int64) {
 		phsh(pnote, sh)
 	}
 
+	if HEADTYPE == obj.Hatman {
+		{
+			sh := elfshname(".note.Xen.loader")
+			resoff -= int64(elfatmansig(sh, uint64(startva), uint64(resoff)))
+			pnote := newElfPhdr()
+			pnote.type_ = PT_NOTE
+			pnote.flags = PF_R
+			phsh(pnote, sh)
+		}
+
+		{
+			sh := elfshname(".note.Xen.version")
+			resoff -= int64(elfatmansig(sh, uint64(startva), uint64(resoff)))
+			pnote := newElfPhdr()
+			pnote.type_ = PT_NOTE
+			pnote.flags = PF_R
+			phsh(pnote, sh)
+		}
+
+		{
+			sh := elfshname(".note.Xen.hypercall_page")
+			resoff -= int64(elfatmansig(sh, uint64(startva), uint64(resoff)))
+			pnote := newElfPhdr()
+			pnote.type_ = PT_NOTE
+			pnote.flags = PF_R
+			phsh(pnote, sh)
+		}
+	}
+
 	// Additions to the reserved area must be above this line.
 
 	elfphload(&Segtext)
@@ -2598,6 +2680,9 @@ elfobj:
 			a += int64(elfwritegobuildid())
 		}
 	}
+	if HEADTYPE == obj.Hatman {
+		a += int64(elfwriteatmansig())
+	}
 
 	if a > elfreserve {
 		Diag("ELFRESERVE too small: %d > %d", a, elfreserve)
diff --git a/src/cmd/link/internal/ld/sym.go b/src/cmd/link/internal/ld/sym.go
index a44c8de..7953fa5 100644
--- a/src/cmd/link/internal/ld/sym.go
+++ b/src/cmd/link/internal/ld/sym.go
@@ -47,6 +47,7 @@ var headers = []struct {
 	{"freebsd", obj.Hfreebsd},
 	{"linux", obj.Hlinux},
 	{"android", obj.Hlinux}, // must be after "linux" entry or else headstr(Hlinux) == "android"
+	{"atman", obj.Hatman},
 	{"nacl", obj.Hnacl},
 	{"netbsd", obj.Hnetbsd},
 	{"openbsd", obj.Hopenbsd},
@@ -114,6 +115,9 @@ func linknew(arch *sys.Arch) *Link {
 			ctxt.Tlsoffset = -1 * ctxt.Arch.PtrSize
 		}
 
+	case obj.Hatman:
+		ctxt.Tlsoffset = 0
+
 	case obj.Hnacl:
 		switch ctxt.Arch.Family {
 		default:
diff --git a/src/cmd/link/internal/x86/asm.go b/src/cmd/link/internal/x86/asm.go
index cc8f96f..c881387 100644
--- a/src/cmd/link/internal/x86/asm.go
+++ b/src/cmd/link/internal/x86/asm.go
@@ -738,7 +738,8 @@ func asmb() {
 		obj.Hfreebsd,
 		obj.Hnetbsd,
 		obj.Hopenbsd,
-		obj.Hnacl:
+		obj.Hnacl,
+		obj.Hatman:
 		ld.Asmbelf(int64(symo))
 
 	case obj.Hwindows:
diff --git a/src/cmd/link/internal/x86/obj.go b/src/cmd/link/internal/x86/obj.go
index a4d8f50..866bb7f 100644
--- a/src/cmd/link/internal/x86/obj.go
+++ b/src/cmd/link/internal/x86/obj.go
@@ -106,7 +106,8 @@ func archinit() {
 		obj.Hlinux,
 		obj.Hnetbsd,
 		obj.Hopenbsd,
-		obj.Hwindows:
+		obj.Hwindows,
+		obj.Hatman:
 		break
 	}
 
@@ -144,7 +145,8 @@ func archinit() {
 	case obj.Hlinux, /* elf32 executable */
 		obj.Hfreebsd,
 		obj.Hnetbsd,
-		obj.Hopenbsd:
+		obj.Hopenbsd,
+		obj.Hatman:
 		ld.Elfinit()
 
 		ld.HEADR = ld.ELFRESERVE

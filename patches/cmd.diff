diff --git a/src/cmd/api/goapi.go b/src/cmd/api/goapi.go
index 936f9e5..58dc59e 100644
--- a/src/cmd/api/goapi.go
+++ b/src/cmd/api/goapi.go
@@ -68,6 +68,8 @@ var contexts = []*build.Context{
 	{GOOS: "openbsd", GOARCH: "386"},
 	{GOOS: "openbsd", GOARCH: "amd64", CgoEnabled: true},
 	{GOOS: "openbsd", GOARCH: "amd64"},
+	{GOOS: "atman", GOARCH: "amd64", CgoEnabled: true},
+	{GOOS: "atman", GOARCH: "amd64"},
 }
 
 func contextName(c *build.Context) string {
diff --git a/src/cmd/dist/build.go b/src/cmd/dist/build.go
index 4d0b1a0..42211ce 100644
--- a/src/cmd/dist/build.go
+++ b/src/cmd/dist/build.go
@@ -68,6 +68,7 @@ var okgoarch = []string{
 
 // The known operating systems.
 var okgoos = []string{
+	"atman",
 	"darwin",
 	"dragonfly",
 	"linux",
@@ -1131,6 +1132,7 @@ var cgoEnabled = map[string]bool{
 	"solaris/amd64":   true,
 	"windows/386":     true,
 	"windows/amd64":   true,
+	"atman/amd64":     true,
 }
 
 func needCC() bool {
diff --git a/src/cmd/internal/obj/link.go b/src/cmd/internal/obj/link.go
index 2ab2aec..5f278c6 100644
--- a/src/cmd/internal/obj/link.go
+++ b/src/cmd/internal/obj/link.go
@@ -824,6 +824,7 @@ const (
 	Hsolaris
 	Hwindows
 	Hwindowsgui
+	Hatman
 )
 
 func (h *HeadType) Set(s string) error {
@@ -850,6 +851,8 @@ func (h *HeadType) Set(s string) error {
 		*h = Hwindows
 	case "windowsgui":
 		*h = Hwindowsgui
+	case "atman":
+		*h = Hatman
 	default:
 		return fmt.Errorf("invalid headtype: %q", s)
 	}
@@ -880,6 +883,8 @@ func (h *HeadType) String() string {
 		return "windows"
 	case Hwindowsgui:
 		return "windowsgui"
+	case Hatman:
+		return "atman"
 	}
 	return fmt.Sprintf("HeadType(%d)", *h)
 }
diff --git a/src/cmd/internal/obj/x86/asm6.go b/src/cmd/internal/obj/x86/asm6.go
index bf67822..b79e110 100644
--- a/src/cmd/internal/obj/x86/asm6.go
+++ b/src/cmd/internal/obj/x86/asm6.go
@@ -2176,7 +2176,8 @@ func prefixof(ctxt *obj.Link, p *obj.Prog, a *obj.Addr) int {
 				obj.Hfreebsd,
 				obj.Hnetbsd,
 				obj.Hopenbsd,
-				obj.Hsolaris:
+				obj.Hsolaris,
+				obj.Hatman:
 				return 0x64 // FS
 
 			case obj.Hdarwin:
diff --git a/src/cmd/internal/obj/x86/obj6.go b/src/cmd/internal/obj/x86/obj6.go
index eb6f867..801cf11 100644
--- a/src/cmd/internal/obj/x86/obj6.go
+++ b/src/cmd/internal/obj/x86/obj6.go
@@ -56,7 +56,8 @@ func CanUse1InsnTLS(ctxt *obj.Link) bool {
 			obj.Hnacl,
 			obj.Hplan9,
 			obj.Hwindows,
-			obj.Hwindowsgui:
+			obj.Hwindowsgui,
+			obj.Hatman:
 			return false
 		}
 
@@ -66,7 +67,7 @@ func CanUse1InsnTLS(ctxt *obj.Link) bool {
 	switch ctxt.Headtype {
 	case obj.Hplan9, obj.Hwindows, obj.Hwindowsgui:
 		return false
-	case obj.Hlinux:
+	case obj.Hlinux, obj.Hatman:
 		return !ctxt.Flag_shared
 	}
 
diff --git a/src/cmd/link/internal/amd64/asm.go b/src/cmd/link/internal/amd64/asm.go
index 60bd45c..1a527a0 100644
--- a/src/cmd/link/internal/amd64/asm.go
+++ b/src/cmd/link/internal/amd64/asm.go
@@ -711,7 +711,8 @@ func asmb(ctxt *ld.Link) {
 		obj.Hnetbsd,
 		obj.Hopenbsd,
 		obj.Hdragonfly,
-		obj.Hsolaris:
+		obj.Hsolaris,
+		obj.Hatman:
 		ld.Flag8 = true /* 64-bit addresses */
 
 	case obj.Hnacl,
@@ -743,7 +744,8 @@ func asmb(ctxt *ld.Link) {
 			obj.Hopenbsd,
 			obj.Hdragonfly,
 			obj.Hsolaris,
-			obj.Hnacl:
+			obj.Hnacl,
+			obj.Hatman:
 			symo = int64(ld.Segdwarf.Fileoff + ld.Segdwarf.Filelen)
 			symo = ld.Rnd(symo, int64(*ld.FlagRound))
 
@@ -827,7 +829,8 @@ func asmb(ctxt *ld.Link) {
 		obj.Hopenbsd,
 		obj.Hdragonfly,
 		obj.Hsolaris,
-		obj.Hnacl:
+		obj.Hnacl,
+		obj.Hatman:
 		ld.Asmbelf(ctxt, symo)
 
 	case obj.Hwindows,
diff --git a/src/cmd/link/internal/amd64/obj.go b/src/cmd/link/internal/amd64/obj.go
index 9646b60..5ee0d5b 100644
--- a/src/cmd/link/internal/amd64/obj.go
+++ b/src/cmd/link/internal/amd64/obj.go
@@ -112,7 +112,8 @@ func archinit(ctxt *ld.Link) {
 		obj.Hnetbsd,    /* netbsd */
 		obj.Hopenbsd,   /* openbsd */
 		obj.Hdragonfly, /* dragonfly */
-		obj.Hsolaris:   /* solaris */
+		obj.Hsolaris,   /* solaris */
+		obj.Hatman:     /* atman */
 		ld.Elfinit(ctxt)
 
 		ld.HEADR = ld.ELFRESERVE
diff --git a/src/cmd/link/internal/arm64/asm.go b/src/cmd/link/internal/arm64/asm.go
index 118a575..fa8cb5a 100644
--- a/src/cmd/link/internal/arm64/asm.go
+++ b/src/cmd/link/internal/arm64/asm.go
@@ -519,7 +519,8 @@ func asmb(ctxt *ld.Link) {
 		obj.Hfreebsd,
 		obj.Hnetbsd,
 		obj.Hopenbsd,
-		obj.Hnacl:
+		obj.Hnacl,
+		obj.Hatman:
 		ld.Asmbelf(ctxt, int64(symo))
 
 	case obj.Hdarwin:
diff --git a/src/cmd/link/internal/arm64/obj.go b/src/cmd/link/internal/arm64/obj.go
index 7d49163..0e87941 100644
--- a/src/cmd/link/internal/arm64/obj.go
+++ b/src/cmd/link/internal/arm64/obj.go
@@ -89,7 +89,7 @@ func archinit(ctxt *ld.Link) {
 			*ld.FlagRound = 4096
 		}
 
-	case obj.Hlinux: /* arm64 elf */
+	case obj.Hlinux, obj.Hatman: /* arm64 elf */
 		ld.Elfinit(ctxt)
 		ld.HEADR = ld.ELFRESERVE
 		if *ld.FlagTextAddr == -1 {
diff --git a/src/cmd/link/internal/ld/elf.go b/src/cmd/link/internal/ld/elf.go
index 1d8a5dd..cbcd4b9 100644
--- a/src/cmd/link/internal/ld/elf.go
+++ b/src/cmd/link/internal/ld/elf.go
@@ -1289,6 +1289,52 @@ func elfwritenetbsdsig() int {
 	return int(sh.size)
 }
 
+// Atman signature
+func elfatmansig(sh *ElfShdr, startva uint64, resoff uint64) int {
+	n := 4 + 8
+	return elfnote(sh, startva, resoff, n, true)
+}
+
+func elfwriteatmansig(ctxt *Link) int {
+	var n int
+
+	sh := elfwritenotehdr(".note.Xen.loader", 4, 8, 8)
+	if sh == nil {
+		return n
+	}
+	n += int(sh.size)
+
+	Cwrite([]byte("Xen\x00"))
+	Cwrite([]byte("generic\x00"))
+
+	sh = elfwritenotehdr(".note.Xen.version", 4, 8, 5)
+	if sh == nil {
+		return n
+	}
+	n += int(sh.size)
+
+	Cwrite([]byte("Xen\x00"))
+	Cwrite([]byte("xen-3.0\x00"))
+
+	sh = elfwritenotehdr(".note.Xen.hypercall_page", 4, 8, 2)
+	if sh == nil {
+		return n
+	}
+	n += int(sh.size)
+
+	Cwrite([]byte("Xen\x00"))
+
+	var (
+		hypercallPage      = ctxt.Syms.Lookup("runtime._atman_hypercall_page", 0)
+		pageSize           = uint64(0x1000)
+		pageStart          = uint64(Symaddr(hypercallPage))
+		hypercallPageStart = (pageStart + pageSize - 1) &^ (pageSize - 1)
+	)
+	Thearch.Vput(hypercallPageStart)
+
+	return n
+}
+
 // OpenBSD Signature
 const (
 	ELF_NOTE_OPENBSD_NAMESZ  = 8
@@ -1915,6 +1961,11 @@ func (ctxt *Link) doelf() {
 	if *flagBuildid != "" {
 		Addstring(shstrtab, ".note.go.buildid")
 	}
+	if Headtype == obj.Hatman {
+		Addstring(shstrtab, ".note.Xen.loader")
+		Addstring(shstrtab, ".note.Xen.version")
+		Addstring(shstrtab, ".note.Xen.hypercall_page")
+	}
 	Addstring(shstrtab, ".elfdata")
 	Addstring(shstrtab, ".rodata")
 	// See the comment about data.rel.ro.FOO section names in data.go.
@@ -2279,7 +2330,7 @@ func Asmbelf(ctxt *Link, symo int64) {
 	 * segment boundaries downwards to include it.
 	 * Except on NaCl where it must not be loaded.
 	 */
-	if Headtype != obj.Hnacl {
+	if Headtype != obj.Hnacl && false {
 		o := int64(Segtext.Vaddr - pph.vaddr)
 		Segtext.Vaddr -= uint64(o)
 		Segtext.Length += uint64(o)
@@ -2367,6 +2418,33 @@ func Asmbelf(ctxt *Link, symo int64) {
 		phsh(pnote, sh)
 	}
 
+	if Headtype == obj.Hatman {
+		{
+			sh := elfshname(".note.Xen.loader")
+			resoff -= int64(elfatmansig(sh, uint64(startva), uint64(resoff)))
+			pnote := newElfPhdr()
+			pnote.type_ = PT_NOTE
+			pnote.flags = PF_R
+			phsh(pnote, sh)
+		}
+		{
+			sh := elfshname(".note.Xen.version")
+			resoff -= int64(elfatmansig(sh, uint64(startva), uint64(resoff)))
+			pnote := newElfPhdr()
+			pnote.type_ = PT_NOTE
+			pnote.flags = PF_R
+			phsh(pnote, sh)
+		}
+		{
+			sh := elfshname(".note.Xen.hypercall_page")
+			resoff -= int64(elfatmansig(sh, uint64(startva), uint64(resoff)))
+			pnote := newElfPhdr()
+			pnote.type_ = PT_NOTE
+			pnote.flags = PF_R
+			phsh(pnote, sh)
+		}
+	}
+
 	// Additions to the reserved area must be above this line.
 
 	elfphload(&Segtext)
@@ -2704,6 +2782,9 @@ elfobj:
 			a += int64(elfwritegobuildid())
 		}
 	}
+	if Headtype == obj.Hatman {
+		a += int64(elfwriteatmansig(ctxt))
+	}
 
 	if a > elfreserve {
 		Errorf(nil, "ELFRESERVE too small: %d > %d with %d text sections", a, elfreserve, numtext)
diff --git a/src/cmd/link/internal/ld/sym.go b/src/cmd/link/internal/ld/sym.go
index 4908e34..62a4283 100644
--- a/src/cmd/link/internal/ld/sym.go
+++ b/src/cmd/link/internal/ld/sym.go
@@ -93,6 +93,9 @@ func (ctxt *Link) computeTLSOffset() {
 			ctxt.Tlsoffset = -1 * ctxt.Arch.PtrSize
 		}
 
+	case obj.Hatman:
+		ctxt.Tlsoffset = 0
+
 	case obj.Hnacl:
 		switch ctxt.Arch.Family {
 		default:
diff --git a/src/cmd/link/internal/x86/asm.go b/src/cmd/link/internal/x86/asm.go
index af702c2..7907588 100644
--- a/src/cmd/link/internal/x86/asm.go
+++ b/src/cmd/link/internal/x86/asm.go
@@ -768,7 +768,8 @@ func asmb(ctxt *ld.Link) {
 		obj.Hfreebsd,
 		obj.Hnetbsd,
 		obj.Hopenbsd,
-		obj.Hnacl:
+		obj.Hnacl,
+		obj.Hatman:
 		ld.Asmbelf(ctxt, int64(symo))
 
 	case obj.Hwindows, obj.Hwindowsgui:
diff --git a/src/cmd/link/internal/x86/obj.go b/src/cmd/link/internal/x86/obj.go
index ea213be..7c2e781 100644
--- a/src/cmd/link/internal/x86/obj.go
+++ b/src/cmd/link/internal/x86/obj.go
@@ -105,7 +105,8 @@ func archinit(ctxt *ld.Link) {
 	case obj.Hlinux, /* elf32 executable */
 		obj.Hfreebsd,
 		obj.Hnetbsd,
-		obj.Hopenbsd:
+		obj.Hopenbsd,
+		obj.Hatman:
 		ld.Elfinit(ctxt)
 
 		ld.HEADR = ld.ELFRESERVE
